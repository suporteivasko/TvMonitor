import React, { useEffect, useState } from 'react';
import Slider from 'react-slick';
import 'slick-carousel/slick/slick.css';
import 'slick-carousel/slick/slick-theme.css';
import './style.css';
import api from '../../Services/api';
import { Sniper } from '../Loadings/Sniper';

const CarouselProduct = ({ empresa, sector }) => {
  const [categorias, setCategorias] = useState([]);
  const [currentSlide, setCurrentSlide] = useState(0);
  const [isLoading, setLoading] = useState(false);

  useEffect(() => {
    setList(empresa, sector);

    setTimeout(() => {
      getList();
    }, 1000);
  }, []);

  const removeList = () => {
    localStorage.removeItem('list');
  };

  const setList = async (empresa, sector) => {
    try {
      setLoading(true);
      removeList();
      const response = await api.getProducts(empresa, sector);
      if (response.data) {
        localStorage.setItem('list', JSON.stringify(response.data));
      }
    } catch (error) {
      console.error("Erro ao obter produtos:", error);
    } finally {
      setLoading(false);
    }
  };

  const getList = async () => {
    const categoriasFromStorage = await localStorage.getItem('list');

    if (categoriasFromStorage) {
      const categoriasObj = JSON.parse(categoriasFromStorage);
      const categoriasArray = Object.entries(categoriasObj).map(([categoria, produtos]) => ({
        categoria: formatCategoria(categoria),
        produtos,
      }));
      const duplicatedCategorias = categoriasArray.concat(categoriasArray);
      setCategorias(duplicatedCategorias);
    }
  };

  const formatCategoria = (categoria) => {
    return categoria.replace(/\(\d+\)/, '').trim().toUpperCase();
  };

  const setLocalStorageAndState = (data) => {
    localStorage.setItem('list', JSON.stringify(data));
    setCategorias(data);
  };

  const settings = {
    dots: true,
    infinite: true,
    slidesToShow: 1,
    slidesToScroll: 1,
    autoplay: true,
    speed: 500,
    arrows: false,
    autoplaySpeed: 3000,
    cssEase: "linear",
    afterChange: (index) => {
      setCurrentSlide(index);
      if (index === categorias.length - 1) {
        setList(empresa, sector);
      }
    },
  };

  return (
    <div className="carousel-container">
      {isLoading && <Sniper isLoading={isLoading} />}
      {!isLoading && (
        <Slider {...settings}>
          {categorias.map((categoria, index) => (
            <div key={index}>
              <h1 className='text-center'>
                <b>
                  {categoria.categoria}
                </b>
              </h1>
              
              <ul className='list-group'>
                {categoria.produtos.map((produto) => (
                  <li 
                    key={produto.cod_int} 
                    className={`list-group-item ${parseInt(produto.featured) === 1 ? 'bg-danger' : 'bg-dark'} text-light border-0`}
                  >
                    <div className='row'>
                      <div className='col-sm-8 col-md-8 col-lg-8 col-8'>
                        <span className='text'>
                          {produto.name}
                        </span>
                      </div>
                      <div className='col-sm-4 col-md-4 col-lg-4 col-4 d-flex justify-content-end'>
                        <span className='text pe-5'>
                          R$ {Number(produto.price).toLocaleString('pt-BR', { minimumFractionDigits: 2 })}
                        </span>
                      </div>
                    </div>
                  </li>
                ))}
              </ul>
            </div>
          ))}
        </Slider>
      )}
    </div>
  );
};

export default CarouselProduct;
